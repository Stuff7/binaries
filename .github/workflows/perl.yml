name: Install and Release Strawberry Perl for Windows

on:
  push:
    branches:
      - master

jobs:
  install_and_release_strawberry_perl:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Get Strawberry Perl version
        id: strawberry_perl_version
        run: |
          $perlVersion = (perl --version | Select-String -Pattern '\d+\.\d+\.\d+').Matches.Value
          echo "::set-output name=version::$perlVersion"

      - name: Check if release already exists
        id: check_existing_release
        uses: actions/github-script@v5
        with:
          script: |
            const { octokit } = require('@octokit/rest');
            const { owner, repo } = context.repo;
            const { data } = await octokit.repos.getReleaseByTag({ owner, repo, tag: 'v' + process.env.VERSION });
            if (data) {
              console.log('Release already exists');
              process.exit(0);
            }
            console.log('Release does not exist');
            process.exit(1);

      - name: Delete existing release
        if: steps.check_existing_release.outputs.exit-code == '0'
        uses: actions/github-script@v5
        with:
          script: |
            const { octokit } = require('@octokit/rest');
            const { owner, repo } = context.repo;
            await octokit.repos.deleteRelease({ owner, repo, release_id: context.payload.release.id });
            console.log('Deleted existing release');

      - name: Create Strawberry Perl Release
        id: create_release
        uses: actions/create-release@v1
        if: steps.check_existing_release.outputs.exit-code == '1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.strawberry_perl_version.outputs.version }}
          release_name: Strawberry Perl Release v${{ steps.strawberry_perl_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Package Strawberry Perl installation
        run: |
          $perlPath = "C:\Strawberry\"
          $zipFileName = "strawberry_perl_v${{ steps.strawberry_perl_version.outputs.version }}.zip"
          Compress-Archive -Path $perlPath -DestinationPath $zipFileName

      - name: Upload Strawberry Perl ZIP to Release
        id: upload_strawberry_perl
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: strawberry_perl_v${{ steps.strawberry_perl_version.outputs.version }}.zip
          asset_name: strawberry_perl_v${{ steps.strawberry_perl_version.outputs.version }}.zip
          asset_content_type: application/zip
